set r0 = 20  // counter 1
set r2 = 20  // counter 2
set r3 = 65535
set x2 = 500 // fixed
set x3 = 521 // fixed
set address 500 = 1 // fixed
set address 31 = 500 // +1 at a time


/* Read 20 input */

6		LDR r1, 00, 31, 0		// r1 = MEN[31]
7		AMR r1, x2, 0, 0		// r1 += 1
8		STR r1, 00, 31, 0		// MEN[31] = r1

9		LDX x1, 1, 0			// clear x1
10		LDX x1, 31, 0			// x1 = MEN[31]

11		IN r1, 0
12		OUT r1, 1

13		STR r1, x1, 0			// store input into address (501 - 520)
14		SMR r0, x2, 0, 0		// EA = 500, r0 -= 1

15		JNE r0, 00, 6			// if r0 != 0, pc jump to line 6

/* Read 1 input */
16		IN r1, 0				// read an input number
17		OUT r1, 1				// print the input number
18		STR r1, x3, 0, 0		// input -> address 521
19		STR r3, 0, 6, 0			// minimun difference -> address 6

// Now set r1, r0 are set free

/* find the closest one */
20		LDR r1, x3, 0, 0		// read the input number
21		SMR r1, x3, 0, 0		// r1 = |input - c[EA]| (EA from 520 to 501)

22		SMR r1, 0, 6, 0			// compare the difference
23		JCC cc1, x3, 26, 0		// if difference < minimun difference

24		LDR r1, 00, 31, 0		// r1 = MEN[31]
25		SMR r1, x2, 0, 0		// r1 -= 1
26		STR r1, 00, 31, 0		// MEN[31] = r1

27		LDX x1, 1, 22			// clear x1
28		LDX x1, 31, 0			// x1 = MEN[31]

29		SMR r2, x2, 0, 0		// EA = 500, r2 -= 1
30		JMA x3, 31				// Jump to 552 to check if loop ends


547		LDR r0, x1, 0, 0		// r0 is the new cloest value
548		LDR r1, x3, 0, 0
549		SMR r1, x3, 0, 0
550		STR r1, 0, 6, 0			// new minimun difference -> address 6
551		JMA 00, 24				// jump back

/* check if loop, if so, print */
552		JNE r2, 00, 20			// if r2 != 0, pc jump to line 20
553		OUT r0, 1